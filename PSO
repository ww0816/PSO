% lb is the lower bound: lb=[lb_1,lb_2,...,lb_d]
% up is the uppper bound: ub=[ub_1,ub_2,...,ub_d]
% dim is the number of variables (dimension of the problem)


function [lb,ub,dim,fobj] = Get_Functions_details(F)


switch F
    case 'F1'
        fobj = @F1;
        lb=-100;
        ub=100;
        dim=30;
        
    case 'F2'
        fobj = @F2;
        lb=-10;
        ub=10;
        dim=30;
        
    case 'F3'
        fobj = @F3;
        lb=-100;
        ub=100;
        dim=30;
        
    case 'F4'
        fobj = @F4;
        lb=-100;
        ub=100;
        dim=30;
        
    case 'F5'
        fobj = @F5;
        lb=-30;
        ub=30;
        dim=30;
        
    case 'F6'
        fobj = @F6;
        lb=-100;
        ub=100;
        dim=30;
        
     case 'F7'
        fobj = @F7;
        lb=-1.28;
        ub=1.28;
        dim=30;
    
    case 'F8'
        fobj = @F8;
        lb=-5.12;
        ub=5.12;
        dim=30;
        
    case 'F9'
        fobj = @F9;
        lb=-32;
        ub=32;
        dim=30;
        
    case 'F10'
        fobj = @F10;
        lb=-600;
        ub=600;
        dim=30;
        
    case 'F11'
        fobj = @F11;
        lb=-50;
        ub=50;
        dim=30;
        
    case 'F12'
        fobj = @F12;
        lb=-50;
        ub=50;
        dim=30;
        
    case 'F13'
        fobj = @F13;
        lb=-2;
        ub=2;
        dim=2;
        
    case 'F14'
        fobj = @F14;
        lb=0;
        ub=1;
        dim=3;
        
    case 'F15'
        fobj = @F15;
        lb=0;
        ub=1;
        dim=6;
        
    case 'F16'
        fobj = @F16;
        lb=0;
        ub=10;
        dim=4;
        
    case 'F17'
        fobj = @F17;
        lb=0;
        ub=10;
        dim=4;
        
    case 'F18'
        fobj = @F18;
        lb=0;
        ub=10;
        dim=4;
     
end

end

% F1

function o = F1(x)
o=sum(x.^2);
end

% F2

function o = F2(x)
o=sum(abs(x))+prod(abs(x));
end

% F3

function o = F3(x)
dim=size(x,2);
o=0;
for i=1:dim
    o=o+sum(x(1:i))^2;
end
end

% F4

function o = F4(x)
o=max(abs(x));
end

% F5

function o = F5(x)
dim=size(x,2);
o=sum(100*(x(2:dim)-(x(1:dim-1).^2)).^2+(x(1:dim-1)-1).^2);
end

% F6

function o = F6(x)
o=sum(abs((x+.5)).^2);
end


% F7

function o = F7(x)
dim=size(x,2);
o=sum([1:dim].*(x.^4))+rand;
end

% F8

function o = F8(x)
dim=size(x,2);
o=sum(x.^2-10*cos(2*pi.*x))+10*dim;
end

% F9

function o = F9(x)
dim=size(x,2);
o=-20*exp(-.2*sqrt(sum(x.^2)/dim))-exp(sum(cos(2*pi.*x))/dim)+20+exp(1);
end

% F10

function o = F10(x)
dim=size(x,2);
o=sum(x.^2)/4000-prod(cos(x./sqrt([1:dim])))+1;
end

% F11

function o = F11(x)
dim=size(x,2);
o=(pi/dim)*(10*((sin(pi*(1+(x(1)+1)/4)))^2)+sum((((x(1:dim-1)+1)./4).^2).*...
(1+10.*((sin(pi.*(1+(x(2:dim)+1)./4)))).^2))+((x(dim)+1)/4)^2)+sum(Ufun(x,10,100,4));
end

% F12

function o = F12(x)
dim=size(x,2);
o=.1*((sin(3*pi*x(1)))^2+sum((x(1:dim-1)-1).^2.*(1+(sin(3.*pi.*x(2:dim))).^2))+...
((x(dim)-1)^2)*(1+(sin(2*pi*x(dim)))^2))+sum(Ufun(x,5,100,4));
end

% F13

function o = F13(x)
o=(1+(x(1)+x(2)+1)^2*(19-14*x(1)+3*(x(1)^2)-14*x(2)+6*x(1)*x(2)+3*x(2)^2))*...
    (30+(2*x(1)-3*x(2))^2*(18-32*x(1)+12*(x(1)^2)+48*x(2)-36*x(1)*x(2)+27*(x(2)^2)));
end

% F14

function o = F14(x)
aH=[3 10 30;.1 10 35;3 10 30;.1 10 35];cH=[1 1.2 3 3.2];
pH=[.3689 .117 .2673;.4699 .4387 .747;.1091 .8732 .5547;.03815 .5743 .8828];
o=0;
for i=1:4
    o=o-cH(i)*exp(-(sum(aH(i,:).*((x-pH(i,:)).^2))));
end
end

% F15

function o = F15(x)
aH=[10 3 17 3.5 1.7 8;.05 10 17 .1 8 14;3 3.5 1.7 10 17 8;17 8 .05 10 .1 14];
cH=[1 1.2 3 3.2];
pH=[.1312 .1696 .5569 .0124 .8283 .5886;.2329 .4135 .8307 .3736 .1004 .9991;...
.2348 .1415 .3522 .2883 .3047 .6650;.4047 .8828 .8732 .5743 .1091 .0381];
o=0;
for i=1:4
    o=o-cH(i)*exp(-(sum(aH(i,:).*((x-pH(i,:)).^2))));
end
end

% F16

function o = F16(x)
aSH=[4 4 4 4;1 1 1 1;8 8 8 8;6 6 6 6;3 7 3 7;2 9 2 9;5 5 3 3;8 1 8 1;6 2 6 2;7 3.6 7 3.6];
cSH=[.1 .2 .2 .4 .4 .6 .3 .7 .5 .5];

o=0;
for i=1:5
    o=o-((x-aSH(i,:))*(x-aSH(i,:))'+cSH(i))^(-1);
end
end

% F17

function o = F17(x)
aSH=[4 4 4 4;1 1 1 1;8 8 8 8;6 6 6 6;3 7 3 7;2 9 2 9;5 5 3 3;8 1 8 1;6 2 6 2;7 3.6 7 3.6];
cSH=[.1 .2 .2 .4 .4 .6 .3 .7 .5 .5];

o=0;
for i=1:7
    o=o-((x-aSH(i,:))*(x-aSH(i,:))'+cSH(i))^(-1);
end
end

% F18

function o = F18(x)
aSH=[4 4 4 4;1 1 1 1;8 8 8 8;6 6 6 6;3 7 3 7;2 9 2 9;5 5 3 3;8 1 8 1;6 2 6 2;7 3.6 7 3.6];
cSH=[.1 .2 .2 .4 .4 .6 .3 .7 .5 .5];

o=0;
for i=1:10
    o=o-((x-aSH(i,:))*(x-aSH(i,:))'+cSH(i))^(-1);
end
end

function o=Ufun(x,a,k,m)
o=k.*((x-a).^m).*(x>a)+k.*((-x-a).^m).*(x<(-a));
end


% This function is used to initialize the particle positions in the Particle Swarm Optimization (PSO) algorithm.
% Depending on the input parameters, it can handle different variable boundary conditions.
% If all variables have equal boundaries and the user enters a single number for both ub and lb,
% the function will generate uniformly distributed random positions within the entire search space.
% If each variable has different upper and lower boundaries, the function will generate random positions within the respective ranges for each variable.
% Finally, the function returns the initialized position matrix (Positions).

function Positions = initialization(SearchAgents_no, dim, ub, lb)
% Initialization function for the Particle Swarm Optimization (PSO) algorithm

Boundary_no = size(ub, 2); % Number of boundaries (number of columns in ub)

% If the boundaries of all variables are equal and the user enters a single number for both ub and lb
if Boundary_no == 1
    Positions = rand(SearchAgents_no, dim) .* (ub - lb) + lb;
end

% If each variable has a different lb and ub
if Boundary_no > 1
    for i = 1:dim
        ub_i = ub(i);
        lb_i = lb(i);
        Positions(:, i) = rand(SearchAgents_no, 1) .* (ub_i - lb_i) + lb_i;
    end
end

clear all 
clc
close all


SearchAgents_no=30; % Number of search agents
Function_name='F1';% Name of the test function that can be from F1 to F23 (Table 1,2,3 in the paper)
Max_iteration=1000; % Maximum number of iterations
% Load details of the selected benchmark function
[lb,ub,dim,fobj]=Get_Functions_details(Function_name);


[PSO_Best_X,PSO_Best_fit,PSO_cg_curve]=PSO(SearchAgents_no,Max_iteration,lb,ub,dim,fobj);% Basic Particle Swarm Optimization
% Draw objective space
%figure();
semilogy(PSO_cg_curve,'Color',[162,0,21]/255)

title(Function_name) % Title of the plot
xlabel('Iteration'); % x-axis label
ylabel('Best score obtained so far'); % y-axis label
set(gca,'XTick',(0:200:1000));
% grid on % Function in MATLAB to add gridlines to the plot
% box on % Function in MATLAB to display the axes box
legend('PSO') % Set the labels for the curves in the order specified

% Inset plot
% axes('Position',[0.3,0.3,0.3,0.3]); % Position of the inset plot frame
% semilogy(PSO_cg_curve,'Color',[162,0,21]/255)
% Set the x and y limits of the inset plot
% axis([0 200 -10.16 -10]) % For Cartesian coordinate system in a 2D view, the format of lim is [xmin xmax ymin ymax].
% xlim([0 200]);
%set(gca,'XTick',(0:50:200));
%ylim([0 300]);
%set(gca,'YTick',(0:50:300));

function [gBest, gBestScore, cg_curve] = PSO(SearchAgents_no, Max_iter, lb, ub, dim, fobj)
% Particle Swarm Optimization (PSO) algorithm

% Initializations
wMax = 1; % Maximum inertia weight
wMin = 0.72984; % Minimum inertia weight
c1 = 1.49618; % Cognitive coefficient
c2 = 1.49618; % Social coefficient
Vmax = 1.5 * 0.2 * (ub - lb); % Maximum velocity

noP = SearchAgents_no; % Number of particles
iter = Max_iter; % Maximum number of iterations
vel = zeros(noP, dim); % Particle velocity

pBestScore = zeros(noP); % Best fitness value for each particle
pBest = zeros(noP, dim); % Best position for each particle
gBest = zeros(1, dim); % Global best position
cg_curve = zeros(1, iter); % Convergence curve

% Randomly initialize particle positions
pos = initialization(noP, dim, ub, lb);

for i = 1:noP
    pBestScore(i) = inf;
end

% Initialize the best fitness value (objective value) to a large value for minimization problems
gBestScore = inf;

for l = 1:iter
    
    % Limit particle positions within the search space range
    Flag4ub = pos(i, :) > ub;
    Flag4lb = pos(i, :) < lb;
    pos(i, :) = (pos(i, :) .* (~(Flag4ub + Flag4lb))) + ub .* Flag4ub + lb .* Flag4lb;
    
    for i = 1:size(pos, 1)
        % Calculate the objective function value for each particle
        fitness = fobj(pos(i, :));

        if (pBestScore(i) > fitness)
            pBestScore(i) = fitness;
            pBest(i, :) = pos(i, :);
        end
        if (gBestScore > fitness)
            gBestScore = fitness;
            gBest = pos(i, :);
        end
    end
    
    w = wMax - l * ((wMax - wMin) / iter); % Update the inertia weight
    
    % Update particle velocity and position
    for i = 1:size(pos, 1)
        for j = 1:size(pos, 2)
            vel(i, j) = w * vel(i, j) + c1 * rand() * (pBest(i, j) - pos(i, j)) + c2 * rand() * (gBest(j) - pos(i, j));
            
            if (vel(i, j) > Vmax)
                vel(i, j) = Vmax;
            end
            if (vel(i, j) < -Vmax)
                vel(i, j) = -Vmax;
            end
            
            pos(i, j) = pos(i, j) + vel(i, j);
        end
    end
    
    cg_curve(l) = gBestScore; % Store the best fitness value for each iteration
    disp(['Iteration ' num2str(l) ': Best Cost = ' num2str(cg_curve(l))]);
end

% Display the best solution and its optimization value
display(['The best solution obtained by PSO is: ', num2str(gBest)]);
display(['The best optimal value of the objective function found by PSO is: ', num2str(gBestScore)]);

% Plot the convergence curve
figure;
semilogy(cg_curve, 'LineWidth', 2);
xlabel('Iteration');
ylabel('Best Cost');
grid on;

end
